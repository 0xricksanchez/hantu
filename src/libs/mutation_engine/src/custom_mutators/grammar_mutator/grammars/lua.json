{
  "<start>": [["<program>"]],
  "<program>": [["<statement>", "<program>"], [""]],
  "<statement>": [
    [";"],
    [""],
    ["break"],
    ["<var>", " =", "<expr>"],
    ["local", "<varlist>", " =", "<exprlist>"],
    ["<function>"],
    ["<coroutine>"],
    ["<conditional>"],
    ["<loop>"],
    ["return", "<exprlist>"],
    ["goto", "<labelname>"],
    ["::", "<labelname>", "::"]
  ],
  "<labelname>": [["labela"], ["labelb"]],
  "<function>": [
    ["<funcdef>", "(", "<function_args>", ")", "<program>", "end"]
  ],
  "<funcdef>": [
    ["function", "<var>", ".", "<identifier>"],
    ["function", "<var>", ":", "<identifier>"],
    ["function", "<identifier>"]
  ],
  "<lambda>": [["function", "(", "<function_args>", ")", "<program>", "end"]],
  "<function_args>": [[""], ["<function_arglist>"]],
  "<function_arglist>": [
    ["<var>", ",", "<function_arglist>"],
    ["<var>"],
    ["..."]
  ],
  "<coroutine>": [
    ["<var>", " =", "coroutine.create(", "<lambda>", ")"],
    ["<var>", " =", "coroutine.wrap(", "<lambda>", ")"],
    ["coroutine.resume(", "<var>", ",", "<args>", ")"],
    ["coroutine.yield(", "<args>", ")"]
  ],
  "<functioncall>": [
    ["<identifier>", "<args>"],
    ["<expr>", ":", "<identifier>", "<args>"],
    ["<expr>", ".", "<identifier>", "<args>"]
  ],
  "<args>": [
    ["(", "<exprlist>", ")"],
    ["<tableconstructor>"],
    ["<literalstring>"]
  ],
  "<conditional>": [
    ["if", "<expr>", "then", "<program>", "end"],
    ["if", "<expr>", "then", "<program>", "else", "<program>", "end"]
  ],
  "<loop>": [
    ["while", "(", "<expr>", ")", "do", "<program>", "end"],
    [
      "for",
      "<var>",
      "=",
      "<expr>",
      ",",
      "<expr>",
      ",",
      "<expr>",
      "do",
      "<program>",
      "end"
    ],
    ["repeat", "<program>", "until", "(", "<expr>", ")"]
  ],
  "<exprlist>": [["<expr>", ",", "<exprlist>"], ["<expr>"]],
  "<expr>": [
    ["(nil)"],
    ["(false)"],
    ["(true)"],
    ["(", "<numeral>", ")"],
    ["<literalstring>"],
    ["<tableconstructor>"],
    ["(", "<var>", "[", "<expr>", "]", ")"],
    ["(", "<expr>", "<binop>", "<expr>", ")"],
    ["(", "<unop>", "<expr>", ")"],
    ["<lambda>"],
    ["<var>"],
    ["<functioncall>"],
    ["(", "<expr>", ")"],
    ["..."]
  ],
  "<binop>": [
    ["+"],
    ["-"],
    ["*"],
    ["/"],
    ["//"],
    ["^"],
    ["%"],
    ["&"],
    ["~"],
    ["|"],
    [">>"],
    ["<<"],
    [" .. "],
    ["<"],
    ["<="],
    [">"],
    [">="],
    ["=="],
    ["~="],
    [" and "],
    [" or "]
  ],
  "<unop>": [["-"], [" not "], ["#"], ["~"]],
  "<tableconstructor>": [["{", "<fieldlist>", "}"]],
  "<metatable>": [
    ["<var>", "=", "setmetatable(", "<var>", "<tableconstructor>", ")"]
  ],
  "<fieldlist>": [["<field>", "<fieldlist>"], ["<field>"]],
  "<field>": [
    ["[", "<expr>", "]=", "<expr>"],
    ["<identifier>", "=", "<expr>"],
    ["<expr>"]
  ],
  "<varlist>": [["<var>", "<varlist>"], ["<var>"]],
  "<var>": [
    ["a"],
    ["b"],
    ["c"],
    ["d"],
    ["e"],
    ["coroutine"],
    ["debug"],
    ["math"],
    ["io"],
    ["os"],
    ["package"],
    ["string"],
    ["table"],
    ["_G"],
    ["_VERSION"],
    ["_ENV"],
    ["self"],
    ["<identifier>"],
    ["utf8"]
  ],
  "<literalstring>": [["<string>"], ["[[", "<string>", "]]"]],
  "<string>": [
    ["<char>", "<string>"],
    ["<char>"],
    [""],
    [" "],
    ["\n"],
    ["\t"],
    ["\r"],
    ["0"],
    ["a"],
    ["/"],
    ["."],
    ["$"],
    ["<escape>"]
  ],
  "<escape>": [
    ["\\a"],
    ["\\b"],
    ["\\f"],
    ["\\n"],
    ["\\r"],
    ["\\t"],
    ["\\v"],
    ["\\z"],
    ["<hexadecimal>"],
    ["\\u{", "<hexadecimal>", "}"]
  ],
  "<numeral>": [["<decimal>"], ["0x", "<decimal>"]],
  "<decimal>": [
    ["<decimaldigit>", "<decimaldigits>"],
    [
      "<decimaldigit>",
      "<decimaldigits>",
      "e",
      "<decimaldigit>",
      "<decimaldigits"
    ],
    [
      "<decimaldigit>",
      "<decimaldigits>",
      "e-",
      "<decimaldigit>",
      "<decimaldigits"
    ],
    [
      "<decimaldigit>",
      "<decimaldigits>",
      ".",
      "<decimaldigit>",
      "<decimaldigits"
    ],
    [
      "<decimaldigit>",
      "<decimaldigits>",
      ".",
      "<decimaldigit>",
      "<decimaldigits",
      "e",
      "<decimaldigit>",
      "<decimaldigits>"
    ],
    [
      "<decimaldigit>",
      "<decimaldigits>",
      ".",
      "<decimaldigit>",
      "<decimaldigits",
      "e-",
      "<decimaldigit>",
      "<decimaldigits>"
    ]
  ],
  "<decimaldigits>": [
    ["<decimaldigit>", "<decimaldigits>"],
    ["<decimaldigit>"]
  ],
  "<decimaldigit>": [
    ["0"],
    ["1"],
    ["2"],
    ["3"],
    ["4"],
    ["5"],
    ["6"],
    ["7"],
    ["8"],
    ["9"]
  ],
  "<hexadecimal>": [
    ["<hexadecimaldigit>", "<hexadecimaldigits>"],
    [
      "<hexadecimaldigit>",
      "<hexadecimaldigits>",
      "p",
      "<hexadecimaldigit>",
      "<hexadecimaldigits>"
    ],
    [
      "<hexadecimaldigit>",
      "<hexadecimaldigits>",
      "p-",
      "<hexadecimaldigit>",
      "<hexadecimaldigits>"
    ],
    [
      "<hexadecimaldigit>",
      "<hexadecimaldigits>",
      ".",
      "<hexadecimaldigit>",
      "<hexadecimaldigits>"
    ],
    [
      "<hexadecimaldigit>",
      "<hexadecimaldigits>",
      ".",
      "<hexadecimaldigit>",
      "<hexadecimaldigits>",
      "p",
      "<hexadecimaldigit>",
      "<hexadecimaldigits>"
    ],
    [
      "<hexadecimaldigit>",
      "<hexadecimaldigits>",
      ".",
      "<hexadecimaldigit>",
      "<hexadecimaldigits>",
      "p-",
      "<hexadecimaldigit>",
      "<hexadecimaldigits>"
    ]
  ],
  "<hexadecimaldigits>": [
    ["<hexadecimaldigit>", "<hexadecimaldigits>"],
    ["<hexadecimaldigit>"]
  ],
  "<hexadecimaldigit>": [
    ["<decimaldigit>"],
    ["a"],
    ["b"],
    ["c"],
    ["d"],
    ["e"],
    ["f"],
    ["A"],
    ["B"],
    ["C"],
    ["D"],
    ["E"],
    ["F"]
  ],
  "<identifier>": [
    ["self"],
    ["G"],
    ["_VERSION"],
    ["assert"],
    ["collectgarbage"],
    ["dofile"],
    ["error"],
    ["getmetatable"],
    ["ipairs"],
    ["load"],
    ["loadfile"],
    ["next"],
    ["pairs"],
    ["pcall"],
    ["print"],
    ["rawequal"],
    ["rawget"],
    ["rawlen"],
    ["rawset"],
    ["require"],
    ["select"],
    ["setmetatable"],
    ["tonumber"],
    ["tostring"],
    ["type"],
    ["xpcall"],
    ["coroutine"],
    ["create"],
    ["isyieldable"],
    ["resume"],
    ["running"],
    ["status"],
    ["wrap"],
    ["yield"],
    ["debug"],
    ["debug"],
    ["gethook"],
    ["getinfo"],
    ["getlocal"],
    ["getmetatable"],
    ["getregistry"],
    ["getupvalue"],
    ["getuservalue"],
    ["sethook"],
    ["setlocal"],
    ["setmetatable"],
    ["setupvalue"],
    ["setuservalue"],
    ["traceback"],
    ["upvalueid"],
    ["upvaluejoin"],
    ["io"],
    ["close"],
    ["flush"],
    ["input"],
    ["lines"],
    ["open"],
    ["output"],
    ["popen"],
    ["read"],
    ["stderr"],
    ["stdin"],
    ["stdout"],
    ["tmpfile"],
    ["type"],
    ["write"],
    ["math"],
    ["abs"],
    ["acos"],
    ["asin"],
    ["atan"],
    ["ceil"],
    ["cos"],
    ["deg"],
    ["exp"],
    ["floor"],
    ["fmod"],
    ["huge"],
    ["log"],
    ["max"],
    ["maxinteger"],
    ["min"],
    ["mininteger"],
    ["modf"],
    ["pi"],
    ["rad"],
    ["random"],
    ["randomseed"],
    ["sin"],
    ["sqrt"],
    ["tan"],
    ["tointeger"],
    ["type"],
    ["ult"],
    ["os"],
    ["clock"],
    ["date"],
    ["difftime"],
    ["exit"],
    ["getenv"],
    ["remove"],
    ["rename"],
    ["setlocale"],
    ["time"],
    ["tmpname"],
    ["package"],
    ["config"],
    ["cpath"],
    ["loaded"],
    ["loadlib"],
    ["path"],
    ["preload"],
    ["searchers"],
    ["searchpath"],
    ["string"],
    ["byte"],
    ["char"],
    ["dump"],
    ["find"],
    ["format"],
    ["gmatch"],
    ["gsub"],
    ["len"],
    ["lower"],
    ["match"],
    ["pack"],
    ["packsize"],
    ["rep"],
    ["reverse"],
    ["sub"],
    ["unpack"],
    ["upper"],
    ["table"],
    ["concat"],
    ["insert"],
    ["move"],
    ["pack"],
    ["remove"],
    ["sort"],
    ["unpack"],
    ["utf8"],
    ["char"],
    ["charpattern"],
    ["codepoint"],
    ["codes"],
    ["len"],
    ["offset"],
    ["__index"],
    ["__newindex"],
    ["__add"],
    ["__sub"],
    ["__mul"],
    ["__div"],
    ["__mod"],
    ["__unm"],
    ["__concat"],
    ["__eq"],
    ["__lt"],
    ["__le"],
    ["__call"],
    ["__tostring"]
  ]
}
